Description: >
  Following the step by step tutorial for using AWS Gateway to expose Lambda
  function.
Resources:
  MusicdownBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt ParseMusicdownLambda.Arn
            Event: s3:ObjectCreated:*
  MusicdownBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MusicdownBucket
      PolicyDocument:
        Statement:
        -
          Action:
            - s3:GetObject
          Effect: Allow
          Resource: !Sub arn:aws:s3:::${MusicdownBucket}/*
          Principal: '*'
  ParseMusicdownLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs4.3
      Timeout: 25
      TracingConfig:
        Mode: Active
      Code:
        ZipFile: !Sub |
          'use strict';
          console.log('Loading event');

          var AWS = require('aws-sdk');
          var s3 = new AWS.S3();

          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

          exports.handler = function(event, context) {
            var src_bkt = event.Records[0].s3.bucket.name;
            var src_key = event.Records[0].s3.object.key;

            s3.getObject({
              Bucket: src_bkt,
              Key: src_key
            }, function(err, data) {
              if (err) {
                console.log(err, err.stack);
              } else {
                dynamodb.putItem({
                    "TableName": "${MusicdownDynamoDBTable}",
                    "Item" : {
                        "BucketName": {"S": src_bkt },
                        "BucketKey": {"S": src_key },
                        "Title": {"S": "some title" },
                        "Composer": {"S": "some composer" }
                    }
                }, function (err, data) {
                  if (err) console.log(err, err.stack);
                  else {
                    console.log(data);
                    context.succeed();
                  }
                });

              }
            });
          }
  LambdaBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt ParseMusicdownLambda.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::${MusicdownBucket}
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Musicdown API
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
    DependsOn:
      - MusicdownsGet
  Prod:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: '/musicdown'
          HttpMethod: POST
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: ERROR
  MusicdownModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: Musicdown
      ContentType: application/json
      RestApiId: !Ref ApiGateway
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: Musicdown
        type: array
        items:
          type: object
          properties:
            url:
              type: string
            title:
              type: string
            composer:
              type: string
  MusicdownResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: musicdown
  MusicdownsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref MusicdownResource
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.filter: false
      AuthorizationType: NONE
      RequestModels:
        application/json: !Ref MusicdownModel
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
         - Effect: Allow
           Principal:
             Service:
              - apigateway.amazonaws.com
           Action: sts:AssumeRole
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          'use strict';
          console.log('Loading event');

          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

          exports.handler = function(event, context, callback) {
            console.log(JSON.stringify(context));

            var params = {
              TableName: "${MusicdownDynamoDBTable}",
              FilterExpression:
                "(contains(Title, :search) OR contains(Composer, :search))",
              ExpressionAttributeValues: {
                ":search": {
                  "S": "some"
                }
              }
            };

            dynamodb.scan(params, function(err, data) {
              if (err) {
                console.log(err, err.stack);
              } else {
                callback(null, data.Items.map(function(item){
                  return {
                    "url":"https://s3.${AWS::Region}.amazonaws.com/" + item.BucketName.S + "/" + item.BucketKey.S,
                    "title":item.Title.S,
                    "composer":item.Composer.S
                  }
                }));
              }
             });
          };
      Runtime: nodejs4.3
      Timeout: 25
      TracingConfig:
        Mode: Active
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
              - 's3:GetObject*'
              Resource: arn:aws:s3:::musicdown-musicdownbucket-ecu0ot3q4lsi
      - PolicyName: dynamodb
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - 'dynamodb:*'
            Resource: arn:aws:dynamodb:*:*:*
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - 'logs:*'
            Resource: arn:aws:logs:*:*:*
      - PolicyName: xray
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - 'xray:PutTraceSegments'
            Resource: '*'
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}
      Principal: apigateway.amazonaws.com
  MusicdownDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Title
          AttributeType: S
        - AttributeName: Composer
          AttributeType: S
      KeySchema:
        - AttributeName: Title
          KeyType: HASH
        - AttributeName: Composer
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5